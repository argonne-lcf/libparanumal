/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

void surfaceTerms_v3(const int e,
                  const int sk,
                  const int face,
                  const dlong base,
                  const int i,
                  const int j,
                  const int k,
                  const dfloat *x,
                  const dfloat *y,
                  const dfloat *z,
                  const dfloat time,
                  const dfloat mu,
                  const dfloat gamma,
                  const dfloat *sgeo,
                  const dlong *vmapM,
                  const dlong *vmapP,
                  const dlong *EToB,
                  const dfloat *q,
                  dfloat *sgradq){

  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];
  const dfloat nz = sgeo[sk*p_Nsgeo+p_NZID];
  const dfloat sJ = sgeo[sk*p_Nsgeo+p_SJID];
  const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];

  const dlong idM = vmapM[sk];
  const dlong idP = vmapP[sk];

  const dlong eM = e;
  const dlong eP = idP/p_Np;
  const int vidM = idM%p_Np;
  const int vidP = idP%p_Np;

  const dlong baseM = eM*p_Np*p_Nfields + vidM;
  const dlong baseP = eP*p_Np*p_Nfields + vidP;

  const dfloat rM  = q[baseM + 0*p_Np];
  const dfloat ruM = q[baseM + 1*p_Np];
  const dfloat rvM = q[baseM + 2*p_Np];
  const dfloat rwM = q[baseM + 3*p_Np];

  dfloat uM = ruM/rM;
  dfloat vM = rvM/rM;
  dfloat wM = rwM/rM;

  dfloat rP  = q[baseP + 0*p_Np];
  dfloat ruP = q[baseP + 1*p_Np];
  dfloat rvP = q[baseP + 2*p_Np];
  dfloat rwP = q[baseP + 3*p_Np];

  dfloat uP = ruP/rP;
  dfloat vP = rvP/rP;
  dfloat wP = rwP/rP;

  const int bc = EToB[face+p_Nfaces*e];
  if(bc>0) {
    const dfloat pM = gamma*gamma*rM;
    dfloat pP = gamma*gamma*rP;
    dfloat dudx = 0.f, dudy = 0.f, dudz = 0.f; //fake these values
    dfloat dvdx = 0.f, dvdy = 0.f, dvdz = 0.f; //fake these values
    dfloat dwdx = 0.f, dwdy = 0.f, dwdz = 0.f; //fake these values
    cnsBoundaryConditions3D(bc, gamma, mu, \
                            time, x[idM], y[idM], z[idM], nx, ny, nz, \
                            rM, uM, vM, wM, pM,
                            0., 0., 0., 0., 0., 0., 0., 0., 0.,
                            &rP, &uP, &vP, &wP, &pP,
                            &dudx, &dudy, &dudz, &dvdx, &dvdy, &dvdz, &dwdx, &dwdy, &dwdz);
  }

  const dfloat sc = 0.5f*invWJ * sJ;
  // const dlong base = e*p_Np*p_Ngrads+k*p_Nq*p_Nq+j*p_Nq+i;
  sgradq[base+0] = sc*nx*(uP-uM);
  sgradq[base+1] = sc*ny*(uP-uM);
  sgradq[base+2] = sc*nz*(uP-uM);
  sgradq[base+3] = sc*nx*(vP-vM);
  sgradq[base+4] = sc*ny*(vP-vM);
  sgradq[base+5] = sc*nz*(vP-vM);
  sgradq[base+6] = sc*nx*(wP-wM);
  sgradq[base+7] = sc*ny*(wP-wM);
  sgradq[base+8] = sc*nz*(wP-wM);
}

@kernel void cnsGradSurfaceHex3D_V3(const int Nelements,
                                 @restrict const  dfloat *  sgeo,
                                 @restrict const  dfloat *  LIFT,
                                 @restrict const  int    *  vmapM,
                                 @restrict const  int    *  vmapP,
                                 @restrict const  int    *  EToB,
                                 @restrict const  dfloat *  x,
                                 @restrict const  dfloat *  y,
                                 @restrict const  dfloat *  z,
                                 const dfloat time,
                                 const dfloat mu,
                                 const dfloat gamma,
                                 @restrict const  dfloat *  q,
                                 @restrict dfloat *  gradq){

  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){

    // p_Nfp = No. of nodes per face = (Nq*Nq)
    @shared dfloat s_gradq[p_NblockS*p_Nfaces*p_Nfp*p_Ngrads];   // Number of grads per element/workgroup

    // for all face nodes of all elements
    for(int es=0;es<p_NblockS;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          const dlong e = eo + es;
          dlong sbase = (es*p_Nfp*p_Nfaces + j*p_Nq + i)*p_Ngrads;
          dlong sk = e*p_Nfp*p_Nfaces + j*p_Nq + i;
          if(e<Nelements){
            // face 0 & 5
            dlong sk1 = e*p_Nfp*p_Nfaces + 0*p_Nfp + j*p_Nq + i;
            dlong sk2 = e*p_Nfp*p_Nfaces + 5*p_Nfp + j*p_Nq + i;

            surfaceTerms_v3(e, sk1, 0, sbase+0*p_Nfp*p_Ngrads, i, j, 0       , x, y, z, time, mu, gamma, sgeo, vmapM, vmapP, EToB, q, s_gradq);
            surfaceTerms_v3(e, sk2, 5, sbase+5*p_Nfp*p_Ngrads, i, j, (p_Nq-1), x, y, z, time, mu, gamma, sgeo, vmapM, vmapP, EToB, q, s_gradq);

            // face 1 & 3
            sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + j*p_Nq + i;
            sk2 = e*p_Nfp*p_Nfaces + 3*p_Nfp + j*p_Nq + i;

            surfaceTerms_v3(e, sk1, 1, sbase+1*p_Nfp*p_Ngrads, i, 0       , j, x, y, z, time, mu, gamma, sgeo, vmapM, vmapP, EToB, q, s_gradq);
            surfaceTerms_v3(e, sk2, 3, sbase+3*p_Nfp*p_Ngrads, i, (p_Nq-1), j, x, y, z, time, mu, gamma, sgeo, vmapM, vmapP, EToB, q, s_gradq);

            // face 2 & 4
            sk1 = e*p_Nfp*p_Nfaces + 2*p_Nfp + j*p_Nq + i;
            sk2 = e*p_Nfp*p_Nfaces + 4*p_Nfp + j*p_Nq + i;

            surfaceTerms_v3(e, sk1, 2, sbase+2*p_Nfp*p_Ngrads, (p_Nq-1), i, j, x, y, z, time, mu, gamma, sgeo, vmapM, vmapP, EToB, q, s_gradq);
            surfaceTerms_v3(e, sk2, 4, sbase+4*p_Nfp*p_Ngrads, 0       , i, j, x, y, z, time, mu, gamma, sgeo, vmapM, vmapP, EToB, q, s_gradq);
          }
        }
      }
    }
    // @barrier;


    // Alternate approach
    for(int es=0;es<p_NblockS;++es;@inner(1)) {
      for(int l=0;l<p_Ngrads;++l;@inner(0)) {
        dlong e = es + eo;
        if(e<Nelements) {
        // Update the face nodes in serial
        for(int j=0;j<p_Nq;++j) {
          for(int i=0;i<p_Nq;++i) {
            // Face 0
            dlong base = e*p_Np*p_Ngrads + 0*p_Nq*p_Nq + j*p_Nq + i;
            dlong sbase = (es*p_Nfp*p_Nfaces + 0*p_Nfp + j*p_Nq + i)*p_Ngrads;
            gradq[base+l*p_Np] += sgradq[sbase+l]; // Do this for all gradients
            
            // Face 5
            base = e*p_Np*p_Ngrads + (p_Nq-1)*p_Nq*p_Nq + j*p_Nq + i;
            sbase = (es*p_Nfp*p_Nfaces + 5*p_Nfp + j*p_Nq + i)*p_Ngrads;
            gradq[base+l*p_Np] += sgradq[sbase+l];

            // Face 1
            base = e*p_Np*p_Ngrads + j*p_Nq*p_Nq + 0*p_Nq + i;
            sbase = (es*p_Nfp*p_Nfaces + 1*p_Nfp + j*p_Nq + i)*p_Ngrads;
            gradq[base+l*p_Np] += sgradq[sbase+l];

            // Face 3
            base = e*p_Np*p_Ngrads + j*p_Nq*p_Nq + (p_Nq-1)*p_Nq + i;
            sbase = (es*p_Nfp*p_Nfaces + 3*p_Nfp + j*p_Nq + i)*p_Ngrads;
            gradq[base+l*p_Np] += sgradq[sbase+l];

            // Face 2
            base = e*p_Np*p_Ngrads + j*p_Nq*p_Nq + i*p_Nq + 0;
            sbase = (es*p_Nfp*p_Nfaces + 2*p_Nfp + j*p_Nq + i)*p_Ngrads;
            gradq[base+l*p_Np] += sgradq[sbase+l];

            // Face 4
            base = e*p_Np*p_Ngrads + j*p_Nq*p_Nq + i*p_Nq + (p_Nq-1);
            sbase = (es*p_Nfp*p_Nfaces + 4*p_Nfp + j*p_Nq + i)*p_Ngrads;
            gradq[base+l*p_Np] += sgradq[sbase+l];
          }
        } // i-j loop over surface nodes
        } // if e<Nelements
      }
    }

  } // Outer loop eo
}

